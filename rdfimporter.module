<?php
// $Id$

/**
 * @file
 * RDFimporter module - Feeds plugins with added 'preview' functionality.
 */

/**
 * Implementation of hook_menu().
 */
function rdfimporter_menu() {
  $items = array();
  $items['rdfimporter/testing'] = array(
    'title' => 'Testing Area',
    'page callback' => 'rdfimporter_test_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'rdfimporter.test.inc',
  );
  return $items;
}

/**
 * Implementation of hook_init().
 */
function rdfimporter_init() {
  module_load_include('inc', 'rdfimporter', 'rdfimporter.classes');
  rdfimporter_include_arc();
} 

/**
 * Implementation of hook_theme().
 */
function rdfimporter_theme() {
  return array(
    'rdfimporter_samples' => array(
      'arguments' => array('samples' => array()),
    ),
    'rdfimporter_sample' => array(
      'arguments' => array('sample' => array()),
    ),
  );
}

/**
* Implementation of hook_feeds_plugins().
*/
function rdfimporter_feeds_plugins() {
  $path = drupal_get_path('module', 'rdfimporter') . '/plugins';
  $info = array();
  $info['RdfImporterSparqlFetcher'] = array(
    'name' => 'RDFimporter SPARQL Fetcher',
    'description' => 'Fetches RDF from a SPARQL endpoint',
    'hidden' => FALSE,
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class' => 'RdfImporterSparqlFetcher',
      'file' => 'RdfImporterSparqlFetcher.inc',
      'path' => $path,
    ),
  );
  $info['RdfImporterLinkedDataFetcher'] = array(
    'name' => 'RDFimporter Linked Data Fetcher',
    'description' => 'Fetches RDF via HTTP content negotiation',
    'hidden' => FALSE,
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class' => 'RdfImporterLinkedDataFetcher',
      'file' => 'RdfImporterLinkedDataFetcher.inc',
      'path' => $path,
    ),
  );
  $info['RdfImporterParser'] = array(
    'name' => 'RDFimporter Parser',
    'description' => 'Parses RDF data',
    'hidden' => FALSE,
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'RdfImporterParser',
      'file' => 'RdfImporterParser.inc',
      'path' => $path,
    ),
  );
  $info['RdfImporterNodeProcessor'] = array(
    'name' => 'RDFimporter Node Processor',
    'description' => 'Creates and updates nodes from RDF',
    'hidden' => FALSE,
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'RdfImporterNodeProcessor',
      'file' => 'RdfImporterNodeProcessor.inc',
      'path' => $path,
    ),
  );
  return $info;
}

/**
 * Implementation of hook_form_alter().
 *
 * Add importer id and feed nid (0 for node-less feeds) to the Feeds source form.
 * These are needed for the batch process that fetches feed previews. The values 
 * must be added here with an alter because the source form itself has no 
 * awareness of the active importer or feed nid.
 */
function rdfimporter_form_alter(&$form, $form_state, $form_id) {
  if ($form['#id'] == 'node-form' || $form['#id'] == 'feeds-import-form') {
    
    // Only continue if there is a Feeds source form present
    // and our parser is being used.
    if (isset($form['feeds']['RdfImporterParser'])) {
      
      $importer_id = isset($form['#importer_id']) ? $form['#importer_id'] : $form['#feed_id'];
      $feed_nid = isset($form['nid']['#value']) ? $form['nid']['#value'] : 0;
      
      // If the node form has not been saved yet remove 
      // some of the preview elements and change the text.
      if ($form['#id'] == 'node-form' && !$feed_nid) {
        // unset($form['feeds']['RdfImporterParser']['preview']['warning']);
        $form['feeds']['RdfImporterParser']['preview']['status_message']['#value'] = t('Run a preview to see sample data for this feed. The preview is also used to show available properties on the mappings page.');
        $form['feeds']['RdfImporterParser']['preview']['refresh']['#value'] = t('Save and Preview');
      }
      
      // Store values required by refresh submit handler.
      $form['rdfimporter_feed_nid'] = array(
        '#type' => 'value',
        '#value' => $feed_nid,
      );
      $form['rdfimporter_importer'] = array(
        '#type' => 'value',
        '#value' => $importer_id,
      );
      
      // If there is sample data, also add an "Edit mappings" link.
      if (isset($form['feeds']['RdfImporterParser']['preview']['samples_table'])) {
        $form['feeds']['RdfImporterParser']['mappings_link'] = array(
          '#prefix' => '<em>',
          '#value' => l('Edit mappings', 'admin/build/feeds/edit/' . $importer_id . '/mapping'),
          '#suffix' => '</em>',
          '#weight' => -15,
        );
      }
    }
  }
}

/**
 * Submit handler for preview 'Save and Refresh' button
 *
 * Sets up a batch job to do a 'preview' import.
 *
 * This can be activated from two places:
 *  1. Node form
 *  2. Feeds' standalone import form
 * Form arrays will be different depending on where the preview originates.
 */
function rdfimporter_refresh_preview_submit($form, &$form_state) {
  $importer_id = ($form['#importer_id']) ? $form['#importer_id'] : $form_state['values']['rdfimporter_importer'];
  $feed_nid = ($form_state['values']['rdfimporter_feed_nid']) ? $form_state['values']['rdfimporter_feed_nid'] : 0;
  
  if (!$importer_id) {
    drupal_set_message(t('Preview was canceled because the importer ID was missing.'), 'warning');
    return;
  }
  
  $batch = array(
    'operations' => array(
      array('rdfimporter_refresh_preview_process', array($importer_id, $feed_nid)),
      ),
    'title' => t('Refreshing preview'),
    'init_message' => t('Fetching data...'),
    'progress_message' => t('Fetching data...'),
    'error_message' => t('Could not finish fetching data.'),
    'finished' => 'rdfimporter_refresh_preview_finished'
  );
  batch_set($batch);
  
  // For a node form - save the node, for a Feeds import form - save the source.
  if ($form['#id'] == 'node-form') {
    module_load_include('inc', 'node', 'node.pages');
    node_form_submit($form, &$form_state);
  }
  else {
    $source = feeds_source($form['#importer_id']);
    $source->addConfig($form_state['values']['feeds']);
    $source->save();
  }
}

/**
 * Batch API "process" callback for preview.
 *
 * Creates a FeedsImportBatch object that gets serialized and
 * saved to the database between page loads. 
 */
function rdfimporter_refresh_preview_process($importer_id = '', $feed_nid = 0, &$context) {
  $context['finished'] = 1;
  
  // Stashing the nid in here so we can do a drupal_goto()
  // redirect after the batch finishes.
  $context['results']['feed_nid'] = $feed_nid;
  
  try {
    $source = feeds_source($importer_id, $feed_nid);
    
    // Run a feed preview() to get an initial FeedsImportBatch object
    // and save it in the Batch API's sandbox to use for each pass.
    // The object has to be serialized/unserialized by hand otherwise
    // it will not re-initialize correctly.
    if (!isset($context['sandbox']['feeds_batch'])) {
      $feeds_batch = $source->preview();
      
      // If we don't have a list of URIs to fetch, no reason to continue.
      if (!count($feeds_batch->items)) {
        drupal_set_message(t('Could not create a preview using importer %importer because there were no URIs to fetch.', array('%importer' => $importer_id)), 'warning');
        $context['finished'] = 1;
        return;
      }
      
      // If the number of items exceeds the specified limit, trim the items array.
      $config = $source->getConfigFor($source->importer->parser);
      $max = $config['fetch_limit'];
      if ($max < count($feeds_batch->items) && $max > 0) {
        $feeds_batch->items = array_slice($feeds_batch->items, 0, $max);
      }
      $feeds_batch->sample_limit = $config['sample_limit'];
      $feeds_batch->fetch_labels = $config['fetch_labels'];
      
      $context['sandbox']['total'] = count($feeds_batch->items);
      $context['sandbox']['feeds_batch'] = serialize($feeds_batch);
    }
    
    $feeds_batch = isset($feeds_batch) ? $feeds_batch : unserialize($context['sandbox']['feeds_batch']);
    
    // For some reason the __wakeup() function is not being called
    // when the FeedsImportBatch object gets unserialized. 
    // So we have to give it a little kick in the ass to re-initialize ARC.
    if (!is_object($feeds_batch->arc)) {
      $feeds_batch->__wakeup();
    }
    
    $saved = $source->importer->parser->gatherSamples($feeds_batch);
    $remaining = count($feeds_batch->items);
    if (!$remaining || !$saved) {
      $source->importer->parser->saveSamples($feeds_batch, $source);
      $context['finished'] = 1;
      return;
    }
    
    $context['sandbox']['feeds_batch'] = serialize($feeds_batch);
    $context['finished'] = ($context['sandbox']['total'] - $remaining) / $context['sandbox']['total'];
  }
  catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
  }
}

/**
 * Batch API "finished" callback for preview.
 *
 * If working with a feed node, redirect to node edit form
 * when the preview import is complete. 
 */
function rdfimporter_refresh_preview_finished($success, $results, $operations) {
  drupal_set_message(t('The preview ran successfully.'), 'status', FALSE);
  if ($success && !empty($results['feed_nid'])) {
    drupal_goto('node/' . $results['feed_nid'] . '/edit', '', 'rdfimporter-preview');
  }
}

/**
 * Include the ARC2 library.
 *
 * Looks in the following locations:
 * 1. <libraries directory>/arc
 * 2. <RDF module>/vendor/arc
 * 3. <RDFimporter module>/arc
 */
function rdfimporter_include_arc() {
  if (!class_exists('ARC2')) {
    if (module_exists('libraries') && file_exists(libraries_get_path('arc') ."/ARC2.php")) {
      require_once libraries_get_path('arc') .'/ARC2.php';
    }
    elseif (defined('RDF_ARC2_PATH') && file_exists('./' . RDF_ARC2_PATH . '/ARC2.php')) {
      require_once './' . RDF_ARC2_PATH . '/ARC2.php';
    }
    elseif (file_exists(drupal_get_path('module', 'rdfimporter') . '/arc/ARC2.php')) {
      require_once drupal_get_path('module', 'rdfimporter') . '/arc/ARC2.php';
    }
  }
  if (!class_exists('ARC2')) {
    drupal_set_message(t('The ARC2 library could not be loaded. ARC2 is required for the RDFimporter module to work. Check the INSTALL file inside the rdfimporter module folder to find out how ARC can be installed.'), 'warning', FALSE);
  }
}

/**
 * Validate a SPARQL query string.
 */
function rdfimporter_validate_sparql($query, &$errors = NULL) {
  $parser = ARC2::getSPARQLParser();
  $parser->parse($query);

  if ($parser->getErrors()) {
    $errors = $parser->getErrors();
    return FALSE;
  }
  return TRUE;
}

/**
 * Validation functions from the RDF module.
 */
function rdfimporter_validate_uri($uri) {
  return rdfimporter_is_valid_url($uri) || rdfimporter_is_valid_urn($uri);
}

function rdfimporter_is_valid_url($url) {
  static $allowed_characters = '[a-z0-9\/:_\-_\.\?\$,;~=#&%\+]';
  return preg_match("/^([a-z]+):\/\/" . $allowed_characters . "+$/i", (string)$url);
}

function rdfimporter_is_valid_urn($urn) {
  return preg_match('/^urn:/', $urn) || preg_match('/^mailto:/', $urn); // FIXME
}

/**
 * Theme sample data for a feed as a table
 */
function theme_rdfimporter_samples($samples) {
  if (!empty($samples)) {
    $rows = array();
    
    foreach ($samples as $uri => $property) {
      $row = $items = array();
      $row[0] = array();
      // If the sample array has been merged with others the label may an array
      $label = is_array($property['label']) ? $property['label'][0] : $property['label'];
      $row[0]['data'] = '<strong class="property-label">'. $label .'</strong>';
      $row[0]['data'] .= '<em class="property-uri">'. $uri .'</em>';
      $row[0]['class'] = 'property';
      
      // Clean up the array - if it has been merged it may have duplicates
      // $property['values'] = array_unique($property['values']);
      // $property['values'] = array_slice($property['values'], 0, RDFIMPORTER_MAX_SAMPLES);
      
      // Build a list of property values
      foreach ($property['values'] as $i => $item) {
        $items[$i] = theme('rdfimporter_sample', $item);
      }
      
      $row[1] = theme('item_list', $items);
      $rows[] = $row;
    }
    
    // Sort by property name
    uasort($rows, 'rdfimporter_sort_table_rows');
    $header = array(
      '0' => array('data' => t('RDF Property'), 'class' => 'first'),
      '1' => array('data' => t('Sample'), 'class' => 'second'),
    );
    
    return theme('table', $header, $rows, array('class' => 'rdfimporter-samples'));
  }
  else {
    return '';
  }
}

/**
 * Theme a single sample
 */
function theme_rdfimporter_sample($item) {
  $sample = '';
  
  // Handle object properties differently
  if ($item['type'] == 'uri') {
    // Only output a label if it's there
    if (!empty($item['label'])) {
      $sample = '<p class="label">'. $item['label'] .'</p>';
    }
    $sample .= '<em class="uri">'. $item['value'] .'</em>';
  }
  else {
    $sample = '<p class="value">'. $item['value'] .'</p>';
  }
  return $sample;
}

/**
 * uasort() callback for sorting table rows by property name
 */
function rdfimporter_sort_table_rows($a, $b) {
  return strcasecmp($a[0]['data'], $b[0]['data']);
}